// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package image

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f2eff5fDecodeGithubComBurnbAnkifillerInternalImage(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "url":
			easyjson9f2eff5fDecode(in, &out.Url)
		case "queries":
			easyjson9f2eff5fDecode1(in, &out.Queries)
		case "context":
			easyjson9f2eff5fDecode2(in, &out.Context)
		case "searchInformation":
			easyjson9f2eff5fDecode3(in, &out.SearchInformation)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]struct {
							Kind        string `json:"kind"`
							Title       string `json:"title"`
							HtmlTitle   string `json:"htmlTitle"`
							Link        string `json:"link"`
							DisplayLink string `json:"displayLink"`
							Snippet     string `json:"snippet"`
							HtmlSnippet string `json:"htmlSnippet"`
							Mime        string `json:"mime"`
							FileFormat  string `json:"fileFormat"`
							Image       struct {
								ContextLink     string `json:"contextLink"`
								Height          int    `json:"height"`
								Width           int    `json:"width"`
								ByteSize        int    `json:"byteSize"`
								ThumbnailLink   string `json:"thumbnailLink"`
								ThumbnailHeight int    `json:"thumbnailHeight"`
								ThumbnailWidth  int    `json:"thumbnailWidth"`
							} `json:"image"`
						}, 0, 0)
					} else {
						out.Items = []struct {
							Kind        string `json:"kind"`
							Title       string `json:"title"`
							HtmlTitle   string `json:"htmlTitle"`
							Link        string `json:"link"`
							DisplayLink string `json:"displayLink"`
							Snippet     string `json:"snippet"`
							HtmlSnippet string `json:"htmlSnippet"`
							Mime        string `json:"mime"`
							FileFormat  string `json:"fileFormat"`
							Image       struct {
								ContextLink     string `json:"contextLink"`
								Height          int    `json:"height"`
								Width           int    `json:"width"`
								ByteSize        int    `json:"byteSize"`
								ThumbnailLink   string `json:"thumbnailLink"`
								ThumbnailHeight int    `json:"thumbnailHeight"`
								ThumbnailWidth  int    `json:"thumbnailWidth"`
							} `json:"image"`
						}{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Kind        string `json:"kind"`
						Title       string `json:"title"`
						HtmlTitle   string `json:"htmlTitle"`
						Link        string `json:"link"`
						DisplayLink string `json:"displayLink"`
						Snippet     string `json:"snippet"`
						HtmlSnippet string `json:"htmlSnippet"`
						Mime        string `json:"mime"`
						FileFormat  string `json:"fileFormat"`
						Image       struct {
							ContextLink     string `json:"contextLink"`
							Height          int    `json:"height"`
							Width           int    `json:"width"`
							ByteSize        int    `json:"byteSize"`
							ThumbnailLink   string `json:"thumbnailLink"`
							ThumbnailHeight int    `json:"thumbnailHeight"`
							ThumbnailWidth  int    `json:"thumbnailWidth"`
						} `json:"image"`
					}
					easyjson9f2eff5fDecode4(in, &v1)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComBurnbAnkifillerInternalImage(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		easyjson9f2eff5fEncode(out, in.Url)
	}
	{
		const prefix string = ",\"queries\":"
		out.RawString(prefix)
		easyjson9f2eff5fEncode1(out, in.Queries)
	}
	{
		const prefix string = ",\"context\":"
		out.RawString(prefix)
		easyjson9f2eff5fEncode2(out, in.Context)
	}
	{
		const prefix string = ",\"searchInformation\":"
		out.RawString(prefix)
		easyjson9f2eff5fEncode3(out, in.SearchInformation)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson9f2eff5fEncode4(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComBurnbAnkifillerInternalImage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComBurnbAnkifillerInternalImage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComBurnbAnkifillerInternalImage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComBurnbAnkifillerInternalImage(l, v)
}
func easyjson9f2eff5fDecode4(in *jlexer.Lexer, out *struct {
	Kind        string `json:"kind"`
	Title       string `json:"title"`
	HtmlTitle   string `json:"htmlTitle"`
	Link        string `json:"link"`
	DisplayLink string `json:"displayLink"`
	Snippet     string `json:"snippet"`
	HtmlSnippet string `json:"htmlSnippet"`
	Mime        string `json:"mime"`
	FileFormat  string `json:"fileFormat"`
	Image       struct {
		ContextLink     string `json:"contextLink"`
		Height          int    `json:"height"`
		Width           int    `json:"width"`
		ByteSize        int    `json:"byteSize"`
		ThumbnailLink   string `json:"thumbnailLink"`
		ThumbnailHeight int    `json:"thumbnailHeight"`
		ThumbnailWidth  int    `json:"thumbnailWidth"`
	} `json:"image"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "htmlTitle":
			out.HtmlTitle = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "displayLink":
			out.DisplayLink = string(in.String())
		case "snippet":
			out.Snippet = string(in.String())
		case "htmlSnippet":
			out.HtmlSnippet = string(in.String())
		case "mime":
			out.Mime = string(in.String())
		case "fileFormat":
			out.FileFormat = string(in.String())
		case "image":
			easyjson9f2eff5fDecode5(in, &out.Image)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode4(out *jwriter.Writer, in struct {
	Kind        string `json:"kind"`
	Title       string `json:"title"`
	HtmlTitle   string `json:"htmlTitle"`
	Link        string `json:"link"`
	DisplayLink string `json:"displayLink"`
	Snippet     string `json:"snippet"`
	HtmlSnippet string `json:"htmlSnippet"`
	Mime        string `json:"mime"`
	FileFormat  string `json:"fileFormat"`
	Image       struct {
		ContextLink     string `json:"contextLink"`
		Height          int    `json:"height"`
		Width           int    `json:"width"`
		ByteSize        int    `json:"byteSize"`
		ThumbnailLink   string `json:"thumbnailLink"`
		ThumbnailHeight int    `json:"thumbnailHeight"`
		ThumbnailWidth  int    `json:"thumbnailWidth"`
	} `json:"image"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"htmlTitle\":"
		out.RawString(prefix)
		out.String(string(in.HtmlTitle))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"displayLink\":"
		out.RawString(prefix)
		out.String(string(in.DisplayLink))
	}
	{
		const prefix string = ",\"snippet\":"
		out.RawString(prefix)
		out.String(string(in.Snippet))
	}
	{
		const prefix string = ",\"htmlSnippet\":"
		out.RawString(prefix)
		out.String(string(in.HtmlSnippet))
	}
	{
		const prefix string = ",\"mime\":"
		out.RawString(prefix)
		out.String(string(in.Mime))
	}
	{
		const prefix string = ",\"fileFormat\":"
		out.RawString(prefix)
		out.String(string(in.FileFormat))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		easyjson9f2eff5fEncode5(out, in.Image)
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode5(in *jlexer.Lexer, out *struct {
	ContextLink     string `json:"contextLink"`
	Height          int    `json:"height"`
	Width           int    `json:"width"`
	ByteSize        int    `json:"byteSize"`
	ThumbnailLink   string `json:"thumbnailLink"`
	ThumbnailHeight int    `json:"thumbnailHeight"`
	ThumbnailWidth  int    `json:"thumbnailWidth"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contextLink":
			out.ContextLink = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "byteSize":
			out.ByteSize = int(in.Int())
		case "thumbnailLink":
			out.ThumbnailLink = string(in.String())
		case "thumbnailHeight":
			out.ThumbnailHeight = int(in.Int())
		case "thumbnailWidth":
			out.ThumbnailWidth = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode5(out *jwriter.Writer, in struct {
	ContextLink     string `json:"contextLink"`
	Height          int    `json:"height"`
	Width           int    `json:"width"`
	ByteSize        int    `json:"byteSize"`
	ThumbnailLink   string `json:"thumbnailLink"`
	ThumbnailHeight int    `json:"thumbnailHeight"`
	ThumbnailWidth  int    `json:"thumbnailWidth"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contextLink\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContextLink))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"byteSize\":"
		out.RawString(prefix)
		out.Int(int(in.ByteSize))
	}
	{
		const prefix string = ",\"thumbnailLink\":"
		out.RawString(prefix)
		out.String(string(in.ThumbnailLink))
	}
	{
		const prefix string = ",\"thumbnailHeight\":"
		out.RawString(prefix)
		out.Int(int(in.ThumbnailHeight))
	}
	{
		const prefix string = ",\"thumbnailWidth\":"
		out.RawString(prefix)
		out.Int(int(in.ThumbnailWidth))
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode3(in *jlexer.Lexer, out *struct {
	SearchTime            float64 `json:"searchTime"`
	FormattedSearchTime   string  `json:"formattedSearchTime"`
	TotalResults          string  `json:"totalResults"`
	FormattedTotalResults string  `json:"formattedTotalResults"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "searchTime":
			out.SearchTime = float64(in.Float64())
		case "formattedSearchTime":
			out.FormattedSearchTime = string(in.String())
		case "totalResults":
			out.TotalResults = string(in.String())
		case "formattedTotalResults":
			out.FormattedTotalResults = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode3(out *jwriter.Writer, in struct {
	SearchTime            float64 `json:"searchTime"`
	FormattedSearchTime   string  `json:"formattedSearchTime"`
	TotalResults          string  `json:"totalResults"`
	FormattedTotalResults string  `json:"formattedTotalResults"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"searchTime\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.SearchTime))
	}
	{
		const prefix string = ",\"formattedSearchTime\":"
		out.RawString(prefix)
		out.String(string(in.FormattedSearchTime))
	}
	{
		const prefix string = ",\"totalResults\":"
		out.RawString(prefix)
		out.String(string(in.TotalResults))
	}
	{
		const prefix string = ",\"formattedTotalResults\":"
		out.RawString(prefix)
		out.String(string(in.FormattedTotalResults))
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode2(in *jlexer.Lexer, out *struct {
	Title string `json:"title"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode2(out *jwriter.Writer, in struct {
	Title string `json:"title"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode1(in *jlexer.Lexer, out *struct {
	Request []struct {
		Title          string `json:"title"`
		TotalResults   string `json:"totalResults"`
		SearchTerms    string `json:"searchTerms"`
		Count          int    `json:"count"`
		StartIndex     int    `json:"startIndex"`
		InputEncoding  string `json:"inputEncoding"`
		OutputEncoding string `json:"outputEncoding"`
		Safe           string `json:"safe"`
		Cx             string `json:"cx"`
		Gl             string `json:"gl"`
		SearchType     string `json:"searchType"`
		ImgSize        string `json:"imgSize"`
	} `json:"request"`
	NextPage []struct {
		Title          string `json:"title"`
		TotalResults   string `json:"totalResults"`
		SearchTerms    string `json:"searchTerms"`
		Count          int    `json:"count"`
		StartIndex     int    `json:"startIndex"`
		InputEncoding  string `json:"inputEncoding"`
		OutputEncoding string `json:"outputEncoding"`
		Safe           string `json:"safe"`
		Cx             string `json:"cx"`
		Gl             string `json:"gl"`
		SearchType     string `json:"searchType"`
		ImgSize        string `json:"imgSize"`
	} `json:"nextPage"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				in.Delim('[')
				if out.Request == nil {
					if !in.IsDelim(']') {
						out.Request = make([]struct {
							Title          string `json:"title"`
							TotalResults   string `json:"totalResults"`
							SearchTerms    string `json:"searchTerms"`
							Count          int    `json:"count"`
							StartIndex     int    `json:"startIndex"`
							InputEncoding  string `json:"inputEncoding"`
							OutputEncoding string `json:"outputEncoding"`
							Safe           string `json:"safe"`
							Cx             string `json:"cx"`
							Gl             string `json:"gl"`
							SearchType     string `json:"searchType"`
							ImgSize        string `json:"imgSize"`
						}, 0, 0)
					} else {
						out.Request = []struct {
							Title          string `json:"title"`
							TotalResults   string `json:"totalResults"`
							SearchTerms    string `json:"searchTerms"`
							Count          int    `json:"count"`
							StartIndex     int    `json:"startIndex"`
							InputEncoding  string `json:"inputEncoding"`
							OutputEncoding string `json:"outputEncoding"`
							Safe           string `json:"safe"`
							Cx             string `json:"cx"`
							Gl             string `json:"gl"`
							SearchType     string `json:"searchType"`
							ImgSize        string `json:"imgSize"`
						}{}
					}
				} else {
					out.Request = (out.Request)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Title          string `json:"title"`
						TotalResults   string `json:"totalResults"`
						SearchTerms    string `json:"searchTerms"`
						Count          int    `json:"count"`
						StartIndex     int    `json:"startIndex"`
						InputEncoding  string `json:"inputEncoding"`
						OutputEncoding string `json:"outputEncoding"`
						Safe           string `json:"safe"`
						Cx             string `json:"cx"`
						Gl             string `json:"gl"`
						SearchType     string `json:"searchType"`
						ImgSize        string `json:"imgSize"`
					}
					easyjson9f2eff5fDecode6(in, &v4)
					out.Request = append(out.Request, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nextPage":
			if in.IsNull() {
				in.Skip()
				out.NextPage = nil
			} else {
				in.Delim('[')
				if out.NextPage == nil {
					if !in.IsDelim(']') {
						out.NextPage = make([]struct {
							Title          string `json:"title"`
							TotalResults   string `json:"totalResults"`
							SearchTerms    string `json:"searchTerms"`
							Count          int    `json:"count"`
							StartIndex     int    `json:"startIndex"`
							InputEncoding  string `json:"inputEncoding"`
							OutputEncoding string `json:"outputEncoding"`
							Safe           string `json:"safe"`
							Cx             string `json:"cx"`
							Gl             string `json:"gl"`
							SearchType     string `json:"searchType"`
							ImgSize        string `json:"imgSize"`
						}, 0, 0)
					} else {
						out.NextPage = []struct {
							Title          string `json:"title"`
							TotalResults   string `json:"totalResults"`
							SearchTerms    string `json:"searchTerms"`
							Count          int    `json:"count"`
							StartIndex     int    `json:"startIndex"`
							InputEncoding  string `json:"inputEncoding"`
							OutputEncoding string `json:"outputEncoding"`
							Safe           string `json:"safe"`
							Cx             string `json:"cx"`
							Gl             string `json:"gl"`
							SearchType     string `json:"searchType"`
							ImgSize        string `json:"imgSize"`
						}{}
					}
				} else {
					out.NextPage = (out.NextPage)[:0]
				}
				for !in.IsDelim(']') {
					var v5 struct {
						Title          string `json:"title"`
						TotalResults   string `json:"totalResults"`
						SearchTerms    string `json:"searchTerms"`
						Count          int    `json:"count"`
						StartIndex     int    `json:"startIndex"`
						InputEncoding  string `json:"inputEncoding"`
						OutputEncoding string `json:"outputEncoding"`
						Safe           string `json:"safe"`
						Cx             string `json:"cx"`
						Gl             string `json:"gl"`
						SearchType     string `json:"searchType"`
						ImgSize        string `json:"imgSize"`
					}
					easyjson9f2eff5fDecode6(in, &v5)
					out.NextPage = append(out.NextPage, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode1(out *jwriter.Writer, in struct {
	Request []struct {
		Title          string `json:"title"`
		TotalResults   string `json:"totalResults"`
		SearchTerms    string `json:"searchTerms"`
		Count          int    `json:"count"`
		StartIndex     int    `json:"startIndex"`
		InputEncoding  string `json:"inputEncoding"`
		OutputEncoding string `json:"outputEncoding"`
		Safe           string `json:"safe"`
		Cx             string `json:"cx"`
		Gl             string `json:"gl"`
		SearchType     string `json:"searchType"`
		ImgSize        string `json:"imgSize"`
	} `json:"request"`
	NextPage []struct {
		Title          string `json:"title"`
		TotalResults   string `json:"totalResults"`
		SearchTerms    string `json:"searchTerms"`
		Count          int    `json:"count"`
		StartIndex     int    `json:"startIndex"`
		InputEncoding  string `json:"inputEncoding"`
		OutputEncoding string `json:"outputEncoding"`
		Safe           string `json:"safe"`
		Cx             string `json:"cx"`
		Gl             string `json:"gl"`
		SearchType     string `json:"searchType"`
		ImgSize        string `json:"imgSize"`
	} `json:"nextPage"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		if in.Request == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Request {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson9f2eff5fEncode6(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nextPage\":"
		out.RawString(prefix)
		if in.NextPage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.NextPage {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson9f2eff5fEncode6(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode6(in *jlexer.Lexer, out *struct {
	Title          string `json:"title"`
	TotalResults   string `json:"totalResults"`
	SearchTerms    string `json:"searchTerms"`
	Count          int    `json:"count"`
	StartIndex     int    `json:"startIndex"`
	InputEncoding  string `json:"inputEncoding"`
	OutputEncoding string `json:"outputEncoding"`
	Safe           string `json:"safe"`
	Cx             string `json:"cx"`
	Gl             string `json:"gl"`
	SearchType     string `json:"searchType"`
	ImgSize        string `json:"imgSize"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "totalResults":
			out.TotalResults = string(in.String())
		case "searchTerms":
			out.SearchTerms = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "startIndex":
			out.StartIndex = int(in.Int())
		case "inputEncoding":
			out.InputEncoding = string(in.String())
		case "outputEncoding":
			out.OutputEncoding = string(in.String())
		case "safe":
			out.Safe = string(in.String())
		case "cx":
			out.Cx = string(in.String())
		case "gl":
			out.Gl = string(in.String())
		case "searchType":
			out.SearchType = string(in.String())
		case "imgSize":
			out.ImgSize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode6(out *jwriter.Writer, in struct {
	Title          string `json:"title"`
	TotalResults   string `json:"totalResults"`
	SearchTerms    string `json:"searchTerms"`
	Count          int    `json:"count"`
	StartIndex     int    `json:"startIndex"`
	InputEncoding  string `json:"inputEncoding"`
	OutputEncoding string `json:"outputEncoding"`
	Safe           string `json:"safe"`
	Cx             string `json:"cx"`
	Gl             string `json:"gl"`
	SearchType     string `json:"searchType"`
	ImgSize        string `json:"imgSize"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"totalResults\":"
		out.RawString(prefix)
		out.String(string(in.TotalResults))
	}
	{
		const prefix string = ",\"searchTerms\":"
		out.RawString(prefix)
		out.String(string(in.SearchTerms))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"startIndex\":"
		out.RawString(prefix)
		out.Int(int(in.StartIndex))
	}
	{
		const prefix string = ",\"inputEncoding\":"
		out.RawString(prefix)
		out.String(string(in.InputEncoding))
	}
	{
		const prefix string = ",\"outputEncoding\":"
		out.RawString(prefix)
		out.String(string(in.OutputEncoding))
	}
	{
		const prefix string = ",\"safe\":"
		out.RawString(prefix)
		out.String(string(in.Safe))
	}
	{
		const prefix string = ",\"cx\":"
		out.RawString(prefix)
		out.String(string(in.Cx))
	}
	{
		const prefix string = ",\"gl\":"
		out.RawString(prefix)
		out.String(string(in.Gl))
	}
	{
		const prefix string = ",\"searchType\":"
		out.RawString(prefix)
		out.String(string(in.SearchType))
	}
	{
		const prefix string = ",\"imgSize\":"
		out.RawString(prefix)
		out.String(string(in.ImgSize))
	}
	out.RawByte('}')
}
func easyjson9f2eff5fDecode(in *jlexer.Lexer, out *struct {
	Type     string `json:"type"`
	Template string `json:"template"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "template":
			out.Template = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncode(out *jwriter.Writer, in struct {
	Type     string `json:"type"`
	Template string `json:"template"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	out.RawByte('}')
}
